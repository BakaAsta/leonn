security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh # or, you may use the `api_refresh_token` route name
                # or if you have more than one user provider
                # provider: app_user_provider
            logout:
                path: /api/token/invalidate # or, you may use the `api_token_invalidate` route name
        dev:
            pattern: ^/_(profiler|wdt)
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                # - App\Security\UserAuthenticator
                - App\Security\AppAuthenticator
            logout:
                path: app_logout
            json_login:
                check_path: /auth # The name in routes.yaml is enough for mapping
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true
            custom_authenticators:
                - App\Security\GoogleAuthenticator
     
    access_control:
#        - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing API documentations and Swagger UI docs
#        - { path: ^/auth, roles: PUBLIC_ACCESS }
#        - { path: ^/login, roles: PUBLIC_ACCESS } # Allows accessing the login page
#        - { path: ^/register, roles: PUBLIC_ACCESS } # Allows accessing the register page
#        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY } # Allows accessing the API for admins only
#        - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
#        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY } # Allows accessing the API for everyone who is connected
#        - { path: ^/register, roles: PUBLIC_ACCESS }
#        - { path: ^/azure,  roles: PUBLIC_ACCESS}
#        - {path: ^/auth, roles: PUBLIC_ACCESS}
#        - {path: ^/produit, roles: ROLE_USER}
#        - {path: ^/logout, roles: ROLE_USER}
#        - {path: ^/listePrets/user, roles: ROLE_USER}
#        - { path: ^/, roles: ROLE_ADMIN }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
